version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    container_name: fintech-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/initdb:/docker-entrypoint-initdb.d:ro
    networks:
      - fintech-net

  redis:
    image: redis:7-alpine
    container_name: fintech-redis
    restart: unless-stopped
    networks:
      - fintech-net

  auth-service:
    build:
      context: .
      dockerfile: services/auth_service/Dockerfile
    container_name: auth-service
    environment:
      AUTH_DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/postgres
      REDIS_URL: redis://redis:6379/0
      AUTH_PRIVATE_KEY_PATH: /certs/auth_service.key
      AUTH_PUBLIC_KEY_PATH: /certs/auth_service.crt
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - fintech-net
    volumes:
      - ./certs:/certs:ro
    labels:
      - "com.fintech.service=auth"

  account-service:
    build:
      context: .
      dockerfile: services/account_service/Dockerfile
    container_name: account-service
    environment:
      ACCOUNT_DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/accounts
      REDIS_URL: redis://redis:6379/0
      AUTH_PUBLIC_KEY_PATH: /certs/auth_service.crt
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
    networks:
      - fintech-net
    volumes:
      - ./certs:/certs:ro
    labels:
      - "com.fintech.service=account"

  transaction-service:
    build:
      context: .
      dockerfile: services/transaction_service/Dockerfile
    container_name: transaction-service
    environment:
      TRANSACTION_DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/transactions
      REDIS_URL: redis://redis:6379/0
      AUTH_PUBLIC_KEY_PATH: /certs/auth_service.crt
    ports:
      - "8002:8002"
    depends_on:
      - postgres
      - redis
    networks:
      - fintech-net
    volumes:
      - ./certs:/certs:ro
    labels:
      - "com.fintech.service=transaction"

  audit-service:
    build:
      context: .
      dockerfile: services/audit_service/Dockerfile
    container_name: audit-service
    ports:
      - "8003:8003"
    environment:
      REDIS_URL: redis://redis:6379/0
      AUTH_PUBLIC_KEY_PATH: /certs/auth_service.crt
    networks:
      - fintech-net
    depends_on:
      - redis
    volumes:
      - ./certs:/certs:ro
    labels:
      - "com.fintech.service=audit"

  monitoring-service:
    build:
      context: .
      dockerfile: services/monitoring_service/Dockerfile
    container_name: monitoring-service
    ports:
      - "8004:8004"
    environment:
      REDIS_URL: redis://redis:6379/0
      AUTH_PUBLIC_KEY_PATH: /certs/auth_service.crt
    networks:
      - fintech-net
    depends_on:
      - redis
    volumes:
      - ./certs:/certs:ro
    labels:
      - "com.fintech.service=monitoring"

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    networks:
      - fintech-net

  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    restart: unless-stopped
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
    ports:
      - "9093:9093"
    networks:
      - fintech-net

  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    restart: unless-stopped
    command: ["-config.file=/etc/loki/local-config.yml"]
    volumes:
      - ./logging/loki-config.yml:/etc/loki/local-config.yml:ro
    ports:
      - "3100:3100"
    networks:
      - fintech-net

  promtail:
    image: grafana/promtail:2.9.3
    container_name: promtail
    restart: unless-stopped
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - ./logging/promtail-config.yml:/etc/promtail/config.yml:ro
      - promtail_positions:/tmp/promtail
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - fintech-net

  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_ALLOW_EMBEDDING: "true"
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - fintech-net

networks:
  fintech-net:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  promtail_positions:
    driver: local
